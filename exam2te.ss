(define (test-dropf-cps)
  (let ([correct '(() 
		   (a 2 4 6 8 10)
		   (d 5)
		   ((a 3 c) #f (2 3) (d 5)))]
	[answers 
	 (list
	  (dropf-cps (lambda (n k) (k (odd? n))) (lambda (g-cps) (g-cps '(2 4 6 8 10) (empty-k))))
	  (dropf-cps (lambda (n k) (k (symbol? n))) (lambda (g-cps) (g-cps '(a 2 4 6 8 10) (empty-k))))
	  (dropf-cps (lambda (n k) (k (number? n))) 
		       (lambda (g-cps) (g-cps '(a b c 1 2 3 d 5) 
					      (lambda (ls)
						(dropf-cps (lambda (n k) (k (symbol? n)))
							   (lambda (g-cps) (g-cps ls 
										  (empty-k))))))))
	  (dropf-cps (lambda (ls k) (dropf-cps (lambda (n k) (k (symbol? n))) (lambda (g-cps) (g-cps ls k))))
		       (lambda (g-cps) (g-cps '((a 3 c) #f (2 3) (d 5)) (empty-k)))))])
    (display-results correct answers equal?)))

(define (test-lex-cps)
  (let ([correct 
	 '((lambda (var 0))
	   (lambda (const 120))
	   (lambda (lambda (var 1)))
	   ((lambda (const 0)) (const 5))
	   ((lambda (var 0)) (const 5))
	   (((lambda (lambda (var 1))) (const 6)) (const 5))
	   (lambda (lambda ((var 0) (var 1))))
	   (lambda (lambda ((var 0) (var 0))))
	   (lambda ((lambda ((var 0) (var 1))) (lambda (lambda ((var 2) (var 1))))))
	   (lambda (if (if (const #t) (const #f) (const #t)) (sub1 (var 0)) (sub1 (var 0))))
	   ((lambda ((var 0) (var 0))) (lambda ((var 0) (var 0))))
	   (lambda (lambda (if (const #f) (const 1) ((var 1) (sub1 (var 0))))))
	   (let (let [sub1 (if (const #t) (const 5) (const 6))] [sub1 (var 0)]) (sub1 (sub1 (var 0)))))]
	[answers 
	  (list 
	    (lex-cps '(lambda (x) x) '() (empty-k))
	    (lex-cps '(lambda (x) 120) '() (empty-k))
	    (lex-cps '(lambda (y) (lambda (x) y)) '() (empty-k))
	    (lex-cps '((lambda (x) 0) 5) '() (empty-k))
	    (lex-cps '((lambda (x) x) 5) '() (empty-k))
	    (lex-cps '(((lambda (x) (lambda (y) x)) 6) 5)
		     '()
		     (empty-k))
	    (lex-cps '(lambda (y) (lambda (x) (x y))) '() (empty-k))
	    (lex-cps '(lambda (x) (lambda (x) (x x))) '() (empty-k))
	    (lex-cps '(lambda (y)
			((lambda (x) (x y))
			 (lambda (c) (lambda (d) (y c)))))
		     '() (empty-k))
	    (lex-cps '(lambda (x) (if (if #t #f #t) (sub1 x) (sub1 x)))
		     '()
		     (empty-k))
	    (lex-cps '((lambda (x) (x x)) (lambda (x) (x x))) '() (empty-k))
	    (lex-cps '(lambda (!)
			(lambda (n)
			  (if #f 1 (! (sub1 n)))))
		     '()
		     (empty-k))
	    (lex-cps '(let ((x (let ((y (sub1 (if #t 5 6))))
				 (sub1 y))))
			(sub1 (sub1 x)))
		     '()
		     (empty-k)))])
    (display-results correct answers equal?)))

(define (test-error)
  (let ([correct '(-1 -1 -1 7)]
	[answers 
	 (list 
	   (value-of-cps (lex '(sub1 (* 2 ((lambda (x) (5 (error -1))) 2))) '())
			 (empty-env) 
			 (empty-k))
	   (value-of-cps (lex '(sub1 (* 2 ((lambda (x) (5 (error (sub1 (error -1))))) 2))) '())
			 (empty-env) 
			 (empty-k))
	   (value-of-cps (lex '(sub1 (* 2 (let/cc x ((lambda (y) (5 (throw x (error ((lambda (x) x) -1))))) 2)))) '())
			 (empty-env) 
			 (empty-k))
	   (value-of-cps (lex '(sub1 (* 2 (let/cc x ((lambda (y) (5 (error (sub1 (throw x 4))))) 2)))) '())
			 (empty-env) 
			 (empty-k)))])
    (display-results correct answers equal?)))

(define (test-trace-lambda)
  (let ([correct '(5 4 3 5 5 5 4 3 5 4 4 120 32)]
	[answers
	 (list
	  (value-of-cps (lex '((trace-lambda test (x) x) 5)
   		             '())
		(empty-env)
		(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) (sub1 ((trace-lambda test2 (y) x) 6))) 5)
			     '())
			(empty-env)
			(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) 
				       (sub1 ((trace-lambda test2 (y) 
						      (sub1 ((trace-lambda test2 (z)
								     x)
							     7)))
					      6)))
			       5)
			     '())
			(empty-env)
			(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) 
					     ((trace-lambda test2 (y) 
							    ((trace-lambda test2 (z)
									   x) 
							     7))
					      6)) 
			       5)
		             '())
		(empty-env)
		(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) x) 5)
			     '())
			  (empty-env)
			  (empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) ((trace-lambda test2 (y) x) 6)) 5)
			     '())
			(empty-env)
			(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) (sub1 ((trace-lambda test2 (y) x) 6))) 5)
			     '())
			(empty-env)
			(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) (sub1 ((trace-lambda test2 (y) (sub1 ((trace-lambda test2 (z) x) 7))) 6))) 5)
			     '())
			(empty-env)
			(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) (x x)) (trace-lambda test2 (y) 5))
			     '())
			(empty-env)
			(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) (sub1 ((lambda (y) ((trace-lambda test2 (z) x) 7)) 6))) 5)
			     '())
			(empty-env)
			(empty-k))
	  (value-of-cps (lex '((trace-lambda test (x) (sub1 ((trace-lambda test2 (y) ((trace-lambda test3 (z) x) 7)) 6))) 5)
			     '())
			(empty-env)
			(empty-k))
	  (value-of-cps (lex '(((lambda (f)
				  ((lambda (x) (x x))
				   (lambda (x) (f (lambda (y) ((x x) y)))))) 
				(lambda (fact)
				  (trace-lambda fact (x)
						(if (zero? x) 1
						    (* x (fact (sub1 x)))))))
			       5)
		     '())
		(empty-env)
		(empty-k))
	 (value-of-cps (lex '(((lambda (f)
				 ((lambda (x) (x x))
				  (lambda (x) (f (lambda (y) ((x x) y)))))) 
			       (lambda (mfib)
				 (trace-lambda mfib (n)
					 (if (zero? n) 
					     1
					     (if (zero? (sub1 n))
						 2 
						 (* (mfib (sub1 n)) (mfib (sub1 (sub1 n)))))))))
			      5)
			    '())
		       (empty-env)
		       (empty-k)))])
    (display-results correct answers equal?)))


;;-----------------------------------------------

(define display-results
  (lambda (correct results test-procedure?)
     (display ": ")
     (pretty-print 
      (if (andmap test-procedure? correct results)
          'All-correct
          `(correct: ,correct yours: ,results)))))

(define set-equals?  ; are these list-of-symbols equal when
  (lambda (s1 s2)    ; treated as sets?
    (if (or (not (list? s1)) (not (list? s2)))
        #f
        (not (not (and (is-a-subset? s1 s2) (is-a-subset? s2 s1)))))))

(define is-a-subset?
  (lambda (s1 s2)
    (andmap (lambda (x) (member x s2))
      s1)))

;; You can run the tests individually, or run them all
;; by loading this file (and your solution) and typing (r)

(define (run-all)
  (display 'test-dropf-cps)
  (test-dropf-cps)
  (display 'test-lex-cps)
  (test-lex-cps)
  (display 'test-error)
  (test-error)
  (display 'test-trace-lambda)
  (test-trace-lambda))

(define r run-all)


