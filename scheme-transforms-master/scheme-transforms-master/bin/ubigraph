#!/usr/bin/python
import cPickle as pickle
import xmlrpclib
import random
import sys

# Create an object to represent our server.
server_url = 'http://127.0.0.1:20738/RPC2'
server = xmlrpclib.Server(server_url)

G = server.ubigraph
G.clear()

last_edge = None
last_node = None

# [node id label]
# [edge from-id to-id edge-label]
# [edge_attrib attrib value]
# [node_attrib attrib value]
# [node_attrib node-id attrib value]
def handle(msg):
    global last_edge
    global last_node
    global j
    if msg[0] == "node":
        last_node = G.new_vertex_w_id(msg[1])
        G.set_vertex_attribute(msg[1], "label", msg[2])
    elif msg[0] == "edge":
        if len(msg) == 4:
            last_edge = G.new_edge(msg[1], msg[2])
        elif len(msg) == 5:
            G.new_edge_w_id(msg[1], msg[2], msg[3])
            last_edge = msg[1]
        else:
            raise Exception, msg
        G.set_edge_attribute(last_edge, "label", msg[-1])
    elif msg[0] == "edge_attrib":
        if len(msg) == 3:
            G.set_edge_attribute(last_edge, msg[1], msg[2])
        elif len(msg) == 4:
            G.set_edge_attribute(msg[1], msg[2], msg[3])
        else:
            raise Exception, msg
    elif msg[0] == "node_attrib":
        G.set_vertex_attribute(msg[1], msg[2], msg[3])
    elif msg[0] == "reset":
        G.clear()

def main(G):
    global j
    while True:
        try:
            msg = pickle.load(sys.stdin)
            if msg == "exit" or type(msg) != type([]):
                break
            else:
                handle(msg)
        except EOFError:
            break    

if __name__ == "__main__":
    main(G)
